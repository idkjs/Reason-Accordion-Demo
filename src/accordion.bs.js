// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function unwrapElement(v) {
  if (v !== undefined) {
    return Caml_option.valFromOption(v);
  }
  throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "Passed none to unwrap",
        Error: new Error()
      };
}

function getClassList(item) {
  return item.classList;
}

function toggleClasses(newClass, oldClass, classList) {
  classList.add(newClass);
  classList.remove(oldClass);
  
}

function toggle(toggleAction) {
  if (toggleAction.TAG === /* Expand */0) {
    var item = toggleAction._0;
    var maxHeight = "max-height:" + (toggleAction._1 + "px");
    item.setAttribute("style", maxHeight);
    return toggleClasses("expanded", "collapsed", item.classList);
  }
  var item$1 = toggleAction._0;
  var maxHeight$1 = "max-height:" + (toggleAction._1 + "px");
  item$1.setAttribute("style", maxHeight$1);
  return toggleClasses("collapsed", "expanded", item$1.classList);
}

var accordion = unwrapElement(Caml_option.nullable_to_opt(document.querySelector(".accordion")));

var sections = accordion.querySelectorAll(".section");

function getSectionElement(withClass, section) {
  return unwrapElement(Caml_option.nullable_to_opt(section.querySelector(withClass)));
}

function getHeight(element) {
  return element.clientHeight;
}

function handleHeaderClick(e, headerHeight, contentHeight) {
  var element = e.target;
  var section = element.closest(".section");
  var section$1 = (section == null) ? undefined : Caml_option.some(section);
  if (unwrapElement(section$1).classList.contains("collapsed")) {
    return toggle({
                TAG: /* Expand */0,
                _0: unwrapElement(section$1),
                _1: String(headerHeight + contentHeight | 0)
              });
  } else {
    return toggle({
                TAG: /* Collapse */1,
                _0: unwrapElement(section$1),
                _1: String(headerHeight)
              });
  }
}

function composeItem(node) {
  var header = getSectionElement(".header", node);
  var content = getSectionElement(".content", node);
  var headerHeight = header.clientHeight;
  var contentHeight = content.clientHeight;
  var intialHeight = node.classList.contains("collapsed") ? headerHeight : contentHeight;
  node.setAttribute("style", "max-height:" + (String(intialHeight) + "px"));
  header.addEventListener("click", (function (e) {
          return handleHeaderClick(e, headerHeight, contentHeight);
        }));
  return {
          header: header,
          content: content,
          headerHeight: header.clientHeight,
          contentHeight: content.clientHeight,
          el: unwrapElement(Caml_option.nullable_to_opt(node.parentElement))
        };
}

var accordionElements = $$Array.map(composeItem, Array.prototype.slice.call(sections));

exports.unwrapElement = unwrapElement;
exports.getClassList = getClassList;
exports.toggleClasses = toggleClasses;
exports.toggle = toggle;
exports.accordion = accordion;
exports.sections = sections;
exports.getSectionElement = getSectionElement;
exports.getHeight = getHeight;
exports.handleHeaderClick = handleHeaderClick;
exports.composeItem = composeItem;
exports.accordionElements = accordionElements;
/* accordion Not a pure module */
